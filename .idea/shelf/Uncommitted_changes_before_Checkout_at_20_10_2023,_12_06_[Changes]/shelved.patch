Index: logic/src/main/java/com/keepaste/logic/managers/KeepExecutionManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.keepaste.logic.managers;\r\n\r\nimport com.keepaste.logic.Application;\r\nimport com.keepaste.logic.models.Keep;\r\nimport com.keepaste.logic.models.KeepParameter;\r\nimport com.keepaste.logic.models.WindowInformation;\r\nimport com.keepaste.logic.utils.ClipboardUtils;\r\nimport com.keepaste.logic.utils.KeyboardUtils;\r\nimport com.keepaste.logic.utils.OperatingSystemUtils;\r\nimport lombok.Getter;\r\nimport lombok.extern.log4j.Log4j2;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport javax.swing.*;\r\nimport java.awt.event.KeyListener;\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.Collectors;\r\nimport static com.keepaste.logic.common.Constants.ONLY_COPY_MODE;\r\n\r\n/**\r\n * This class hods methods related to Keep execution.\r\n */\r\n@Log4j2\r\npublic final class KeepExecutionManager {\r\n    public static final String FAILED_TO_EXECUTE_KEEP = \"Failed to execute keep\";\r\n    @Getter\r\n    private static final Map<String, String> globalParameterValuesMap = new HashMap<>();\r\n\r\n    /**\r\n     * Executed a selected {@link Keep} on the currently active window.\r\n     *\r\n     * @param keep the {@link Keep} to execute\r\n     */\r\n    public void executeKeepOnWindow(Keep keep) {\r\n        executeKeepOnWindow(keep, false);\r\n    }\r\n\r\n    /**\r\n     * Executed a selected {@link Keep} on the currently active window.\r\n     *\r\n     * @param keep the {@link Keep} to execute\r\n     * @param refreshParameters true if we wish to clear the existing global parameters and have a fresh start\r\n     */\r\n    public void executeKeepOnWindow(Keep keep, boolean refreshParameters) {\r\n        log.info(\r\n                \"Executing Keep [{}] on window [{}] with refresh parameters [{}]\",\r\n                keep.toStringAll(), Application.getContext().getModelActiveWindow(), refreshParameters);\r\n\r\n        // stopping window interception while running the Keep to prevent pasting on wrong window\r\n        Application.getContext().stopWindowInterceptorRunner();\r\n\r\n        // keeping the active window that the user meant to paste on\r\n        WindowInformation currentlyActiveWindow = Application.getContext().getModelActiveWindow().getActiveWindow();\r\n\r\n        // validating that only one keep is running at a time\r\n        if (Application.getContext().isKeepCurrentlyRunning()) {\r\n            JOptionPane.showMessageDialog(Application.getContext().getGui(),\r\n                    \"Can only run one Keep at a time, please wait for the other Keep to finish or abort it\",\r\n                    \"One Keep at a time please\", JOptionPane.WARNING_MESSAGE);\r\n            return;\r\n        }\r\n\r\n        Application.getContext().setKeepCurrentlyRunning(true);\r\n\r\n        // preventing from enter being pressed on dialogs shown while manipulating parameters from triggering the tree's\r\n        // key listener (prevents from running another keep by mistake when pressing ENTER)\r\n        Optional<KeyListener> viewTreeKeyListener =\r\n                Arrays.stream(Application.getContext().getGui().tree.getKeyListeners())\r\n                        .filter(keyListener -> keyListener.getClass().getName().contains(\"ViewTree\"))\r\n                        .findFirst();\r\n        viewTreeKeyListener.ifPresent(keyListener -> Application.getContext().getGui().tree.removeKeyListener(keyListener));\r\n\r\n        Application.getContext().getGui().labelBackground.setText(\"Executing keep...\");\r\n        Application.getContext().getGui().labelBackground.setVisible(true);\r\n        SwingWorker<Void, String> worker = new SwingWorker<>() {\r\n            @Override\r\n            protected Void doInBackground() throws InterruptedException {\r\n                try {\r\n                    String keepToExecute = manipulateParameters(keep, refreshParameters);\r\n                    log.info(\"Final Keep to execute [{}]\", keepToExecute);\r\n                    if (!StringUtils.isEmpty(keepToExecute)) {\r\n                        log.debug(\"Setting [{}] to clipboard\", keepToExecute);\r\n                        ClipboardUtils.setValue(keepToExecute);\r\n                        if (!Application.getContext().getModelSettings().isFocusOnWindowAndPaste()) {\r\n                            new Thread(() -> {\r\n                                Application.getContext().getGui().labelTargetWindow.setText(\"Keep copied, ready to paste...\");\r\n                                try {\r\n                                    Thread.sleep(1000);\r\n                                } catch (InterruptedException e) {\r\n                                    log.error(\"Sleep interrupted exception\", e);\r\n                                    Thread.currentThread().interrupt();\r\n                                }\r\n                                Application.getContext().getGui().labelTargetWindow.setText(ONLY_COPY_MODE);\r\n                            }).start();\r\n                        } else {\r\n                            if (Application.getContext().getWindowManager().focusOnActiveWindow(currentlyActiveWindow)) {\r\n                                if (Application.getContext().getModelSettings().isFocusOnWindowAndPaste()) {\r\n                                    log.debug(\"pasting \".concat(ClipboardUtils.getValue().toString()));\r\n                                    Application.getContext().getWindowManager().paste();\r\n                                }\r\n\r\n                                if (Application.getContext().getModelSettings().isPressEnterAfterPaste()) {\r\n                                    if (keep.isNeverPressEnter()) {\r\n                                        log.debug(\"keep is set to never press 'enter' so it didn't\");\r\n                                    } else {\r\n                                        log.debug(\"Imitating \\\"ENTER\\\" key\");\r\n                                        KeyboardUtils.enter();\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                JOptionPane.showMessageDialog(Application.getContext().getGui(),\r\n                                        \"Seems like keepaste is not focused on the desired window, please try again...\",\r\n                                        \"Warning\",\r\n                                        JOptionPane.WARNING_MESSAGE);\r\n                                log.debug(\"Not focused on correct window so not pasting and pressing ENTER\");\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    JOptionPane.showMessageDialog(Application.getContext().getGui(),\r\n                            FAILED_TO_EXECUTE_KEEP,\r\n                            \"Bummer...\",\r\n                            JOptionPane.ERROR_MESSAGE);\r\n                    log.error(FAILED_TO_EXECUTE_KEEP, e);\r\n                    throw e;\r\n                }\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void done() {\r\n                Application.getContext().getGui().labelBackground.setVisible(false);\r\n                Application.getContext().setKeepCurrentlyRunning(false);\r\n\r\n                viewTreeKeyListener.ifPresent(keyListener -> Application.getContext().getGui().tree.addKeyListener(keyListener));\r\n\r\n                Application.getContext().setKeepCurrentlyRunning(false);\r\n                Application.getContext().startWindowInterceptorRunner();\r\n\r\n                log.debug(\"Keep execution finished\");\r\n            }\r\n        };\r\n        worker.execute();\r\n\r\n    }\r\n\r\n    /**\r\n     * Will execute a command in shell and return its output as a list of Strings.\r\n     *\r\n     * @param command the command to execute\r\n     * @return  the execution output\r\n     * @throws IOException in case of execution failure\r\n     * @throws InterruptedException in case of execution failure\r\n     */\r\n    public List<String> executeCommand(String command) throws Exception {\r\n        return executeCommand(List.of(command));\r\n    }\r\n\r\n    /**\r\n     * Will execute a command in shell and return its output as a list of Strings.\r\n     *\r\n     * @param commandLines the command lines to execute\r\n     * @return  the execution output\r\n     * @throws IOException in case of execution failure\r\n     * @throws InterruptedException in case of execution failure\r\n     */\r\n    public List<String> executeCommand(List<String> commandLines) throws Exception {\r\n        ProcessBuilder processBuilder = new ProcessBuilder();\r\n        List<String> newKeep = new ArrayList<>();\r\n\r\n        OperatingSystemUtils.OperatingSystemType os = OperatingSystemUtils.getOperatingSystemType();\r\n        switch (os.name()) {\r\n            case OperatingSystemUtils.WINDOWS:\r\n//                newKeep.add(\"cmd.exe\");\r\n//                newKeep.add(\"/c\");\r\n//                newKeep.addAll(commandLines);\r\n//                processBuilder.command(newKeep);\r\n\r\n                newKeep.add(\"powershell.exe\");\r\n                newKeep.add(\"-Command\");\r\n                newKeep.addAll(commandLines);\r\n                processBuilder.command(newKeep);\r\n                break;\r\n            case OperatingSystemUtils.MAC:\r\n            case OperatingSystemUtils.LINUX:\r\n            case OperatingSystemUtils.OTHER:\r\n            default:\r\n                newKeep.add(\"sh\");\r\n                newKeep.add(\"-c\");\r\n                newKeep.addAll(commandLines);\r\n                processBuilder.command(newKeep);\r\n                break;\r\n        }\r\n        processBuilder.redirectErrorStream(true);\r\n        Process process = processBuilder.start();\r\n\r\n        InputStream inputStream = process.getInputStream();\r\n\r\n        BufferedReader reader =\r\n                new BufferedReader(new InputStreamReader(inputStream));\r\n\r\n        int timeout = 10;\r\n        do {\r\n            timeout--;\r\n            process.waitFor(1, TimeUnit.SECONDS);\r\n        } while (process.isAlive() && timeout > 0);\r\n\r\n        if (timeout <= 0) {\r\n            throw new RuntimeException(\"Command timeout exceeded (10 sec.)\");\r\n        }\r\n\r\n        String line;\r\n        List<String> outputLines = new ArrayList<>();\r\n        if (inputStream.available() > 0) {\r\n            while ((line = reader.readLine()) != null) {\r\n                outputLines.add(line);\r\n            }\r\n        }\r\n        inputStream.close();\r\n        return outputLines;\r\n    }\r\n\r\n    /**\r\n     * Will manage a Keep parameter.\r\n     *\r\n     * @param parameter                 the {@link KeepParameter} to handle\r\n     * @param keep                      the {@link Keep} in context\r\n     * @param refreshParameters         if to refresh the global parameters\r\n     * @param currentParameterValuesMap the current global parameters cache\r\n     * @throws IOException\r\n     * @throws InterruptedException\r\n     */\r\n    private void executeParameter(\r\n            KeepParameter parameter,\r\n            Keep keep,\r\n            boolean refreshParameters,\r\n            Map<String, String> currentParameterValuesMap) throws Exception {\r\n        String selectedParamValue = null;\r\n        // checking if we already have a value for this parameter (unless refresh parameters was chosen)\r\n        if (!refreshParameters && parameter.isGlobal() && globalParameterValuesMap.containsKey(parameter.getName())) {\r\n            selectedParamValue = globalParameterValuesMap.get(parameter.getName());\r\n            currentParameterValuesMap.put(parameter.getName(), selectedParamValue);\r\n            log.debug(\"Parameter [{}] was taken from global parameters, selected value=[{}]\", parameter, selectedParamValue);\r\n        } else if (!currentParameterValuesMap.containsKey(parameter.getName())) {\r\n            if (parameter.getPhrase() != null && !parameter.getPhrase().isEmpty()) {\r\n                List<String> keepResult = null;\r\n\r\n                // Keep parameter\r\n                String paramKeepString = parameter.getPhrase();\r\n\r\n                // filling existing parameters values if already chosen and used in the next parameter\r\n                for (Map.Entry<String, String> currParam : currentParameterValuesMap.entrySet()) {\r\n                    if (currentParameterValuesMap.containsKey(currParam.getKey())) {\r\n                        paramKeepString = paramKeepString.replace(String.format(\"<%s>\", currParam.getKey()), currParam.getValue());\r\n                        log.debug(\"Parameter [{}] was taken from current run parameters, selected value=[{}]\", parameter, currParam.getValue());\r\n                    }\r\n                }\r\n\r\n                if (parameter.getPhrase().startsWith(\"[\")) {\r\n                    // predefined array of values\r\n                    keepResult = Arrays.stream(parameter.getPhrase().substring(1, parameter.getPhrase().length() - 1)\r\n                                    .split(\",\")).map(String::trim)\r\n                            .collect(Collectors.toList());\r\n                    log.debug(\"Parameter [{}] is of array type, values=[{}]\", parameter, keepResult);\r\n                } else {\r\n                    if (!StringUtils.isEmpty(paramKeepString)) {\r\n                        try {\r\n                            log.debug(\"Parameter [{}] is of Command type, executing param command [{}]\", parameter, paramKeepString);\r\n\r\n                            // checking if the param Keep uses parameters as well, and if so, executing those first\r\n                            for (KeepParameter innerParameter : keep.getParameters()) {\r\n                                if (paramKeepString.contains(String.format(\"<%s>\", innerParameter.getName()))) {\r\n                                    // this parameter uses another one, so executing it first\r\n                                    executeParameter(innerParameter, keep, refreshParameters, currentParameterValuesMap);\r\n                                    paramKeepString = paramKeepString.replace(\r\n                                            String.format(\"<%s>\", innerParameter.getName()),\r\n                                            currentParameterValuesMap.get(innerParameter.getName()));\r\n                                }\r\n                            }\r\n\r\n                            keepResult = executeCommand(paramKeepString);\r\n                            log.debug(\"Parameter [{}], Keep result=[{}]\", parameter, keepResult);\r\n                        } catch (InterruptedException e) {\r\n                            Thread.currentThread().interrupt();\r\n                        } catch (Exception e) {\r\n                            JOptionPane.showMessageDialog(\r\n                                    Application.getContext().getGui().getContentPane(),\r\n                                    String.format(\r\n                                            \"Failed to run Keep \\\"%s\\\" for parameter \\\"%s\\\". %s.\",\r\n                                            parameter.getPhrase(), parameter.getName(), e.getMessage()),\r\n                                    \"Error when running a Keep\",\r\n                                    JOptionPane.ERROR_MESSAGE\r\n                            );\r\n                            throw e;\r\n                        }\r\n                    }\r\n                }\r\n                if (keepResult != null) {\r\n                    log.debug(\"Showing the user a dialog to choose a value for tha parameter [{}]\", parameter);\r\n                    selectedParamValue = (String) JOptionPane.showInputDialog(\r\n                            Application.getContext().getGui().getContentPane(),\r\n                            String.format(\"Choose a value for %s\", parameter.getName()),\r\n                            \"Set parameter value\",\r\n                            JOptionPane.QUESTION_MESSAGE,\r\n                            null,\r\n                            parseToLineByLine(keepResult),\r\n                            null);\r\n                    log.debug(\"User selected the value [{}] for parameter [{}]\", selectedParamValue, parameter);\r\n                    if (StringUtils.isEmpty(selectedParamValue)) {\r\n                        JOptionPane.showMessageDialog(\r\n                                Application.getContext().getGui(),\r\n                                String.format(\r\n                                        \"Value for parameter \\\"%s\\\" is not set, cancelling processing the Keep\",\r\n                                        parameter.getName())\r\n                        );\r\n                        log.debug(\r\n                                \"The user probably clicked on the cancel button on the dialog to choose a value \"\r\n                                        + \"for the parameter [{}]\", parameter);\r\n                        throw new RuntimeException(\"User cancelled\");\r\n                    }\r\n                }\r\n            } else {\r\n                log.debug(\"Parameter [{}] is of a free-text type\", parameter);\r\n                // free text parameter\r\n                selectedParamValue = JOptionPane.showInputDialog(\r\n                        Application.getContext().getGui().getContentPane(),\r\n                        String.format(\"Input a value for %s\", parameter.getName()),\r\n                        \"Set parameter value\",\r\n                        JOptionPane.QUESTION_MESSAGE);\r\n                log.debug(\"Value of [{}] was set to free-text parameter [{}]\", selectedParamValue, parameter);\r\n            }\r\n\r\n            if (StringUtils.isEmpty(selectedParamValue)) {\r\n                JOptionPane.showMessageDialog(\r\n                        Application.getContext().getGui(),\r\n                        String.format(\"Value for parameter \\\"%s\\\" is not set, cancelling processing the Keep\",\r\n                                parameter.getName())\r\n                );\r\n                log.debug(\r\n                        \"The user probably clicked on the cancel button on the dialog to set a free-text for \"\r\n                                + \"the parameter [{}]\", parameter);\r\n                throw new RuntimeException(\"User cancelled\");\r\n            } else {\r\n                if (keep.getPhrase() != null && !StringUtils.isEmpty(selectedParamValue)) {\r\n                    log.debug(\"Adding value of [{} for parameter [{}] to the current parameters values map\", selectedParamValue, parameter);\r\n                    currentParameterValuesMap.put(parameter.getName(), selectedParamValue);\r\n                    if (parameter.isGlobal()) {\r\n                        log.debug(\r\n                                \"As it is set to be global, adding value of [{}] for parameter [{}] to the global \"\r\n                                        + \"parameters values map\", selectedParamValue, parameter);\r\n                        globalParameterValuesMap.put(parameter.getName(), selectedParamValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /* ***************** PRIVATE METHODS ***************** */\r\n\r\n    private String manipulateParameters(Keep keep, boolean refreshParameters) {\r\n        log.debug(\"Manipulating parameters\");\r\n        // manipulating parameters\r\n\r\n        String keepToExecute = keep.getPhrase();\r\n        Map<String, String> currentParameterValuesMap = new HashMap<>();\r\n        if (keep.getParameters() != null && !keep.getParameters().isEmpty()) {\r\n            for (KeepParameter parameter : keep.getParameters()) {\r\n                log.debug(\"Manipulating parameter [{}]\", parameter);\r\n\r\n                try {\r\n                    executeParameter(parameter, keep, refreshParameters, currentParameterValuesMap);\r\n                } catch (InterruptedException ex) {\r\n                    log.error(FAILED_TO_EXECUTE_KEEP, ex);\r\n                    Thread.currentThread().interrupt();\r\n                }\r\n                catch (Exception ex) {\r\n                    log.error(FAILED_TO_EXECUTE_KEEP, ex);\r\n                    return null; // cancelling\r\n                }\r\n            }\r\n\r\n            for (Map.Entry<String, String> entry : currentParameterValuesMap.entrySet()) {\r\n                keepToExecute = keepToExecute.replace(String.format(\"<%s>\", entry.getKey()), entry.getValue());\r\n            }\r\n        }\r\n\r\n        return keepToExecute;\r\n    }\r\n\r\n    private String[] parseToLineByLine(List<String> stringToParse) {\r\n        if (stringToParse.size() == 1 && stringToParse.get(0).startsWith(\"[\") && stringToParse.get(0).endsWith(\"]\")) {\r\n            // this is a one-liner json array, splitting it, the next 'if' statement will process it\r\n            String jsonArr = stringToParse.get(0);\r\n            jsonArr = jsonArr.substring(1, jsonArr.length() - 1);\r\n            stringToParse = Arrays.asList(jsonArr.split(\",\"));\r\n        }\r\n\r\n        if (!stringToParse.isEmpty() && stringToParse.get(0).equals(\"[\")) {\r\n            // in case of a json array, an option to return visible and actual values for the dropdown lists (name of ec2 instance to display, the id to use on the command)\r\n            // parse from a json array\r\n            stringToParse.remove(0); // the opening '['\r\n            stringToParse.remove(stringToParse.size() - 1); // the closing ']'\r\n            stringToParse.replaceAll(s -> s.replace(\"\\\",\", \"\").replace(\"\\\"\", \"\").trim()); // removing \", and \"\r\n        }\r\n\r\n        Collections.sort(stringToParse);\r\n\r\n        return stringToParse.toArray(new String[stringToParse.size()]);\r\n    }\r\n}\r\n
===================================================================
diff --git a/logic/src/main/java/com/keepaste/logic/managers/KeepExecutionManager.java b/logic/src/main/java/com/keepaste/logic/managers/KeepExecutionManager.java
--- a/logic/src/main/java/com/keepaste/logic/managers/KeepExecutionManager.java	
+++ b/logic/src/main/java/com/keepaste/logic/managers/KeepExecutionManager.java	
@@ -5,6 +5,7 @@
 import com.keepaste.logic.models.KeepParameter;
 import com.keepaste.logic.models.WindowInformation;
 import com.keepaste.logic.utils.ClipboardUtils;
+import com.keepaste.logic.utils.FileSystemUtils;
 import com.keepaste.logic.utils.KeyboardUtils;
 import com.keepaste.logic.utils.OperatingSystemUtils;
 import lombok.Getter;
@@ -13,6 +14,7 @@
 import javax.swing.*;
 import java.awt.event.KeyListener;
 import java.io.BufferedReader;
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -36,6 +38,17 @@
     @Getter
     private static final Map<String, String> globalParameterValuesMap = new HashMap<>();
 
+    private String shell = "/bin/bash";
+
+    public KeepExecutionManager() throws Exception {
+        if (OperatingSystemUtils.getOperatingSystemType() != OperatingSystemUtils.OperatingSystemType.WINDOWS) {
+            List<String> shellValue = executeCommandWithDefaultPath("echo $SHELL");
+            if (!shellValue.isEmpty()) {
+                shell = shellValue.get(0);
+            }
+        }
+    }
+
     /**
      * Executed a selected {@link Keep} on the currently active window.
      *
@@ -154,6 +167,18 @@
 
     }
 
+    /**
+     * Will execute a command in shell and return its output as a list of Strings.
+     *
+     * @param command the command to execute
+     * @return  the execution output
+     * @throws IOException in case of execution failure
+     * @throws InterruptedException in case of execution failure
+     */
+    public List<String> executeCommandWithDefaultPath(String command) throws Exception {
+        return executeCommand(List.of(command), true);
+    }
+
     /**
      * Will execute a command in shell and return its output as a list of Strings.
      *
@@ -163,19 +188,29 @@
      * @throws InterruptedException in case of execution failure
      */
     public List<String> executeCommand(String command) throws Exception {
-        return executeCommand(List.of(command));
+        return executeCommand(List.of(command), false);
     }
 
     /**
      * Will execute a command in shell and return its output as a list of Strings.
      *
-     * @param commandLines the command lines to execute
+     * @param commandLines  the command lines to execute
+     * @param defaultPath   will use the default PATH env var and not the one set by the user, used for Keepaste internal commands (like intercepting the currently active window)
      * @return  the execution output
      * @throws IOException in case of execution failure
      * @throws InterruptedException in case of execution failure
      */
-    public List<String> executeCommand(List<String> commandLines) throws Exception {
+    public List<String> executeCommand(List<String> commandLines, boolean defaultPath) throws Exception {
         ProcessBuilder processBuilder = new ProcessBuilder();
+        // Set the working directory for the process
+        processBuilder.directory(new File(FileSystemUtils.getUserHomeDirectory()));
+
+        if (!defaultPath) {
+            // Get the environment variables
+            Map<String, String> environment = processBuilder.environment();
+            environment.put("PATH", Application.getContext().getModelSettings().getPath());
+        }
+
         List<String> newKeep = new ArrayList<>();
 
         OperatingSystemUtils.OperatingSystemType os = OperatingSystemUtils.getOperatingSystemType();
@@ -195,10 +230,16 @@
             case OperatingSystemUtils.LINUX:
             case OperatingSystemUtils.OTHER:
             default:
-                newKeep.add("sh");
+//                newKeep.add("sh");
+//                newKeep.add("-c");
+//                newKeep.addAll(commandLines);
+//                processBuilder.command(newKeep);
+
+                newKeep.add(shell);
                 newKeep.add("-c");
                 newKeep.addAll(commandLines);
                 processBuilder.command(newKeep);
+//                ProcessBuilder pb = new ProcessBuilder("/bin/bash", "-c", "mopidy");
                 break;
         }
         processBuilder.redirectErrorStream(true);
Index: logic/src/main/java/com/keepaste/logic/utils/ImagesUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * Keepaste - The keep and paste program (http://www.keepaste.com)\r\n * Copyright (C) 2023 Tamir Krispis\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage com.keepaste.logic.utils;\r\n\r\nimport com.keepaste.logic.Application;\r\nimport lombok.NonNull;\r\nimport lombok.extern.log4j.Log4j2;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\n\r\n/**\r\n * This class is a utility class for anything related to images and icons.\r\n */\r\n@Log4j2\r\npublic final class ImagesUtils {\r\n    static final Random random = new Random();\r\n    private static final String KEEPASTE = \"keepaste\";\r\n\r\n    private ImagesUtils() { }\r\n\r\n    /**\r\n     * Will return a generated or known icon to be used on the tree for a Keep based on the command text.\r\n     *\r\n     * @param keepExecutable the Keep's first word on its phrase\r\n     * @return a generated or known icon to be used on the tree for a Keep based on the command text.\r\n     */\r\n    public static ImageIcon getImageIconAndGenerateIfNotPresent(String keepExecutable) {\r\n        Color color = getCommandColor(keepExecutable);\r\n        if (color != null) {\r\n            return getImageIcon(keepExecutable, color);\r\n        } else {\r\n            return getDefaultKeepNodeIcon();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will return the default icon to be used for a Keep on the tree.\r\n     *\r\n     * @return the default icon to be used for a Keep on the tree.\r\n     */\r\n    public static ImageIcon getDefaultKeepNodeIcon() {\r\n        return getImageIcon(KEEPASTE, new Color(128, 128, 128));\r\n    }\r\n\r\n    /**\r\n     * Will return an {@link ImageIcon} from a file path.\r\n     *\r\n     * @param imagePath the image file path\r\n     * @return an {@link ImageIcon} from a filepath.\r\n     */\r\n    public static ImageIcon getImageIconFromFilePath(String imagePath) {\r\n        Image image = getImage(imagePath);\r\n        if (image != null) {\r\n            return new ImageIcon(image);\r\n        } else {\r\n            return new ImageIcon();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will return an {@link Image} from a file path.\r\n     *\r\n     * @param imagePath the image file path\r\n     * @return an {@link Image} from a file path.\r\n     */\r\n    public static Image getImage(String imagePath) {\r\n        try {\r\n            URL url = ImagesUtils.class.getResource(imagePath);\r\n            if (url != null) {\r\n                return ImageIO.read(url);\r\n            }\r\n        } catch (IOException ex) {\r\n            log.error(String.format(\"Failed to load image with path [%s]\", imagePath), ex);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private static ImageIcon getImageIcon(String keepExecutable, Color color) {\r\n        String commandWithThemeName = keepExecutable.concat(\"-\").concat(Application.getContext().getModelSettings().getTheme().getName());\r\n        // this is a known keep, setting specific icon for it\r\n        File file = new File(getCommandsIconsPath(commandWithThemeName));\r\n        if (!file.exists()) {\r\n            generateIcon(commandWithThemeName, color);\r\n        }\r\n        return new ImageIcon(file.getAbsolutePath());\r\n    }\r\n\r\n    public static void generateIcon(@NonNull final String commandExecutable, Color color) {\r\n        int width = 15;\r\n        int height = 15;\r\n\r\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g2d = image.createGraphics();\r\n\r\n        // Enable antialiasing for smoother edges\r\n        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n\r\n        // Set transparent background\r\n        g2d.setColor(new Color(0, 0, 0, 0));\r\n        g2d.fillRect(0, 0, width, height);\r\n\r\n        if (color == null) {\r\n            // Generate random color\r\n            color = new Color(random.nextInt(256), random.nextInt(256), random.nextInt(256));\r\n        }\r\n\r\n        Color letterColor = Color.WHITE;\r\n        if (Application.getContext().getModelSettings().getTheme().getName().equals(\"FlatLaf macOS Dark\")) {\r\n            letterColor = Color.BLACK;\r\n        }\r\n\r\n        // Calculate a lighter color based on the random color\r\n        Color lighterColor = new Color(color.getRed() > 50 ? color.getRed() - 50 : color.getRed(),\r\n                color.getGreen() > 50 ? color.getGreen() - 50 :  color.getGreen(),\r\n                color.getBlue() > 50 ? color.getBlue() - 50 : color.getBlue());\r\n\r\n        // Create gradient paint for the circle\r\n        GradientPaint gradientPaint = new GradientPaint(0, 0, lighterColor, width, height, color, true);\r\n\r\n        // Apply gradient paint to the circle\r\n        g2d.setPaint(gradientPaint);\r\n        g2d.fillOval(0, 0, width - 1, height - 1);\r\n\r\n        // Get the letter to be painted in the middle of the circle\r\n        String letter = commandExecutable.substring(0, 1).toLowerCase();\r\n\r\n        // Set font properties\r\n        Font font = new Font(\"Arial\", Font.PLAIN, 12);\r\n        g2d.setFont(font);\r\n        g2d.setColor(letterColor);\r\n\r\n        // Calculate the position to center the letter\r\n        int letterWidth = g2d.getFontMetrics().stringWidth(letter);\r\n        int letterHeight = g2d.getFontMetrics().getAscent();\r\n        int x = (width - letterWidth) / 2;\r\n        int y = (height - letterHeight) / 2 + letterHeight - 2;\r\n\r\n        // Draw the letter in the middle of the circle\r\n        g2d.drawString(letter, x, y);\r\n\r\n        g2d.dispose();\r\n\r\n        // Save image as PNG\r\n        try {\r\n            ImageIO.write(image, \"png\", new File(getCommandsIconsPath(commandExecutable)));\r\n            log.info(\"Image for image path [{}] was created\", commandExecutable);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static String getCommandsIconsPath(String commandExecutable) {\r\n        FileSystemUtils.createDirectoryIfNotExists(FileSystemUtils.getHomeDirectory().concat(\"/commands_icons\"));\r\n        return FileSystemUtils.getHomeDirectory().concat(\"/commands_icons/\".concat(commandExecutable).concat(\".png\"));\r\n    }\r\n\r\n    private static Color getCommandColor(String command) {\r\n        Map<String, Color> knownCommandsColors = new HashMap<>();\r\n        knownCommandsColors.put(\"aws\", new Color(243, 140, 0));\r\n        knownCommandsColors.put(\"mvn\", new Color(194, 3, 59));\r\n        knownCommandsColors.put(\"terraform\", new Color(94, 55, 214));\r\n        knownCommandsColors.put(\"git\", new Color(225, 74, 50));\r\n        knownCommandsColors.put(\"kubectl\", new Color(45, 104, 216));\r\n        knownCommandsColors.put(\"docker\", new Color(33, 140, 223));\r\n        return knownCommandsColors.get(command.toLowerCase());\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/logic/src/main/java/com/keepaste/logic/utils/ImagesUtils.java b/logic/src/main/java/com/keepaste/logic/utils/ImagesUtils.java
--- a/logic/src/main/java/com/keepaste/logic/utils/ImagesUtils.java	
+++ b/logic/src/main/java/com/keepaste/logic/utils/ImagesUtils.java	
@@ -176,8 +176,8 @@
     }
 
     private static String getCommandsIconsPath(String commandExecutable) {
-        FileSystemUtils.createDirectoryIfNotExists(FileSystemUtils.getHomeDirectory().concat("/commands_icons"));
-        return FileSystemUtils.getHomeDirectory().concat("/commands_icons/".concat(commandExecutable).concat(".png"));
+        FileSystemUtils.createDirectoryIfNotExists(FileSystemUtils.getKeepasteDirectory().concat("/commands_icons"));
+        return FileSystemUtils.getKeepasteDirectory().concat("/commands_icons/".concat(commandExecutable).concat(".png"));
     }
 
     private static Color getCommandColor(String command) {
Index: logic/src/main/java/com/keepaste/logic/utils/FileSystemUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * Keepaste - The keep and paste program (http://www.keepaste.com)\r\n * Copyright (C) 2023 Tamir Krispis\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage com.keepaste.logic.utils;\r\n\r\nimport lombok.NonNull;\r\nimport lombok.extern.log4j.Log4j2;\r\n\r\nimport javax.swing.*;\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n/**\r\n * This class is a utility class for anything related to the file system.\r\n */\r\n@Log4j2\r\npublic class FileSystemUtils {\r\n\r\n    private static final String HOME_DIRECTORY = System.getProperty(\"user.home\").concat(\"/.keepaste\");\r\n\r\n    private FileSystemUtils() {\r\n        // private constructor for utils class\r\n    }\r\n\r\n    public static List<File> getFilesByFolder(String path, String extension){\r\n        List<File> files = new ArrayList<>();\r\n\r\n        //Getting all sub folders from the applications folder\r\n        File file = new File(path);\r\n        String[] names = file.list();\r\n\r\n        if (extension == null)\r\n        {\r\n            extension = \"\";\r\n        }\r\n\r\n        if (names != null) {\r\n            for (String name : names) {\r\n                if (name.toLowerCase().endsWith(extension.toLowerCase())) {\r\n                    if (!name.startsWith(\".\")) {\r\n                        if (!path.endsWith(\"/\")) {\r\n                            path = path.concat(\"/\");\r\n                        }\r\n                        File afile = new File(path + name);\r\n                        files.add(afile);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Collections.sort(files);\r\n        return files;\r\n    }\r\n\r\n    public static boolean createDirectoryIfNotExists(String path){\r\n        File theDir = new File(path);\r\n\r\n        // if the directory does not exist, create it\r\n        if (!theDir.exists()) {\r\n            log.debug(\"Creating directory: \".concat(path));\r\n            boolean result = false;\r\n\r\n            try{\r\n                result = theDir.mkdir();\r\n            } catch(SecurityException se){\r\n                //handle it\r\n                JOptionPane.showMessageDialog(null, \"Infrastructure FileSystem failed: \" + se);\r\n            }\r\n            if (result) {\r\n                log.debug(\"Directory created: \".concat(path));\r\n            }\r\n            return result;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static String getHomeDirectory() {\r\n        String path = HOME_DIRECTORY;\r\n        createDirectoryIfNotExists(path);\r\n        return path;\r\n    }\r\n\r\n    public static boolean isHomeDirectoryExists() {\r\n        return new File(HOME_DIRECTORY).exists();\r\n    }\r\n\r\n    public static boolean deleteFile(@NonNull final String filepath) {\r\n        File file = new File(filepath);\r\n        if (file.exists()) {\r\n            return file.delete();\r\n        }\r\n        return true;\r\n    }\r\n}\r\n
===================================================================
diff --git a/logic/src/main/java/com/keepaste/logic/utils/FileSystemUtils.java b/logic/src/main/java/com/keepaste/logic/utils/FileSystemUtils.java
--- a/logic/src/main/java/com/keepaste/logic/utils/FileSystemUtils.java	
+++ b/logic/src/main/java/com/keepaste/logic/utils/FileSystemUtils.java	
@@ -33,7 +33,7 @@
 @Log4j2
 public class FileSystemUtils {
 
-    private static final String HOME_DIRECTORY = System.getProperty("user.home").concat("/.keepaste");
+    private static final String HOME_DIRECTORY = System.getProperty("user.home");
 
     private FileSystemUtils() {
         // private constructor for utils class
@@ -90,12 +90,16 @@
         return false;
     }
 
-    public static String getHomeDirectory() {
-        String path = HOME_DIRECTORY;
+    public static String getKeepasteDirectory() {
+        String path = HOME_DIRECTORY.concat("/.keepaste");
         createDirectoryIfNotExists(path);
         return path;
     }
 
+    public static String getUserHomeDirectory() {
+        return HOME_DIRECTORY;
+    }
+
     public static boolean isHomeDirectoryExists() {
         return new File(HOME_DIRECTORY).exists();
     }
Index: logic/src/main/java/com/keepaste/logic/managers/window/MacWindowsManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * Keepaste - The keep and paste program (http://www.keepaste.com)\r\n * Copyright (C) 2023 Tamir Krispis\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage com.keepaste.logic.managers.window;\r\n\r\nimport com.keepaste.logic.Application;\r\nimport com.keepaste.logic.managers.KeepsManager;\r\nimport com.keepaste.logic.models.WindowInformation;\r\nimport com.keepaste.logic.utils.FileSystemUtils;\r\nimport com.keepaste.logic.utils.KeyboardUtils;\r\nimport lombok.NonNull;\r\nimport lombok.extern.log4j.Log4j2;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n/**\r\n * This class is Mac's {@link WindowManager}, it holds relevant methods related to windows management in Mac's OS's.\r\n */\r\n@Log4j2\r\npublic final class MacWindowsManager extends BaseWindowManager implements WindowManager {\r\n    public static final String GET_TOP_MOST_WINDOW_APPLESCRIPT_FILENAME = \"GetTopMostWindow.applescript\";\r\n    private String lastTopMostWindowResult;\r\n\r\n    public MacWindowsManager() {\r\n        delAppleScriptFilesForRefresh();\r\n    }\r\n\r\n    @Override\r\n    public WindowInformation getActiveWindow() {\r\n        String topMostWindowResult = null;\r\n        try {\r\n            int tries = 3;\r\n            do {\r\n                topMostWindowResult = runAppleScriptFile(GET_TOP_MOST_WINDOW_APPLESCRIPT_FILENAME);\r\n\r\n                if (topMostWindowResult != null && !topMostWindowResult.equals(lastTopMostWindowResult)) {\r\n                    if (!topMostWindowResult.startsWith(\"success\")) {\r\n                        log.error(topMostWindowResult);\r\n                    } else {\r\n                        log.debug(\"top most window = [{}]\", topMostWindowResult);\r\n                        lastTopMostWindowResult = topMostWindowResult;\r\n                        topMostWindowResult = topMostWindowResult.replace(\"}\", \"\");\r\n                        topMostWindowResult = topMostWindowResult.replace(\"{\", \"\");\r\n                        topMostWindowResult = topMostWindowResult.replace(\" \", \"\");\r\n                        String[] activeWindowSegments = topMostWindowResult.split(\",\");\r\n                        String text = activeWindowSegments[2];\r\n                        String app = activeWindowSegments[1];\r\n                        return WindowInformation.builder()\r\n                                .text(text)\r\n                                .app(app)\r\n                                .top(0)\r\n                                .bottom(0)\r\n                                .left(0)\r\n                                .right(0)\r\n                                .processId(Integer.parseInt(activeWindowSegments[3]))\r\n                                .build();\r\n\r\n                    }\r\n                    lastTopMostWindowResult = topMostWindowResult;\r\n                }\r\n                Thread.sleep(150);\r\n                tries--;\r\n            } while (tries > 0);\r\n        } catch (InterruptedException ex) {\r\n            // Restore interrupted state...\r\n            Thread.currentThread().interrupt();\r\n        } catch (Exception ex) {\r\n            log.error(String.format(\"Failed to get active window, top most window=[%s]\", topMostWindowResult == null ? \"null\" : topMostWindowResult), ex);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void paste() {\r\n        log.debug(\"Pasting using osascript for CMD+V (Apple)\");\r\n        try {\r\n            // this is commented out as it doesn't work well when the command is on one language (English) and the operating system input is set to be in another language (such as Hebrew)\r\n            // so shifted to use cmd+V\r\n            //            Application.getContext().getKeepExecutionManager().executeCommand(\"osascript -e 'tell application \\\"System Events\\\" to keystroke \\\"v\\\" using command down'\");\r\n            cmdV();\r\n            TimeUnit.MILLISECONDS.sleep(50);\r\n//        } catch (IOException e) {\r\n//            log.error(\"Failed to paste for mac\", e);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        } catch (Exception e) {\r\n            log.error(\"Failed to paste on Mac\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean focusOnActiveWindow(@NonNull final WindowInformation windowContext) {\r\n        try {\r\n            log.debug(\"Switching to next window\");\r\n            Application.getContext().getKeepExecutionManager().executeCommand(\"osascript -e 'tell application \\\"System Events\\\" to key code 118 using control down'\");\r\n            // validating that the window is the desired one\r\n            return Application.getContext().getModelActiveWindow().getActiveWindow().equals(windowContext);\r\n        } catch (InterruptedException e) {\r\n            log.error(String.format(\"Failed to focus on window [%s]\", windowContext), e);\r\n            Thread.currentThread().interrupt();\r\n            return false;\r\n        } catch (Exception e) {\r\n            log.error(String.format(\"Failed to focus on window [%s]\", windowContext), e);\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Runs applescript files.\r\n     *\r\n     * @param filename      the filename of the applescript file\r\n     * @param params       relevant command parameters\r\n     * @return             the output as a String\r\n     */\r\n    public String runAppleScriptFile(String filename, String... params) {\r\n        try {\r\n            String filePath = FileSystemUtils.getHomeDirectory().concat(\"/\").concat(filename);\r\n            File scriptFile = new File(filePath);\r\n            if (!scriptFile.exists()) {\r\n                try (InputStream inputStream = KeepsManager.class.getResourceAsStream(\"/scripts/mac/\".concat(filename))) {\r\n                    if (inputStream != null) {\r\n                        String fileContents = new String(inputStream.readAllBytes());\r\n                        try (FileWriter writer = new FileWriter(filePath)) {\r\n                            log.info(\"Saved \".concat(filePath));\r\n                            writer.write(fileContents);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            String command = \"osascript \".concat(scriptFile.getAbsolutePath());\r\n\r\n            for (String param : params) {\r\n                command = command.concat(\" \\\"\").concat(param).concat(\"\\\"\");\r\n            }\r\n\r\n            List<String> output = Application.getContext().getKeepExecutionManager().executeCommand(command);\r\n            if (!output.isEmpty()) {\r\n                return output.get(0);\r\n            }\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        } catch (Exception e) {\r\n            log.error(String.format(\"Failed to run apple script file [%s]\", filename), e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Will delete the used applescript files from the .keepaste folder in order to keep those refreshed, if any changes were done to them between versions.\r\n     */\r\n    private void delAppleScriptFilesForRefresh() {\r\n        FileSystemUtils.deleteFile(FileSystemUtils.getHomeDirectory().concat(\"/\").concat(GET_TOP_MOST_WINDOW_APPLESCRIPT_FILENAME));\r\n    }\r\n\r\n    /**\r\n     * imitating a cmd+v press for pasting on Mac.\r\n     */\r\n    private void cmdV() {\r\n        log.debug(\"Robot pressing CMD+V (pasting on mac)\");\r\n        KeyboardUtils.cmdV();\r\n    }\r\n}\r\n
===================================================================
diff --git a/logic/src/main/java/com/keepaste/logic/managers/window/MacWindowsManager.java b/logic/src/main/java/com/keepaste/logic/managers/window/MacWindowsManager.java
--- a/logic/src/main/java/com/keepaste/logic/managers/window/MacWindowsManager.java	
+++ b/logic/src/main/java/com/keepaste/logic/managers/window/MacWindowsManager.java	
@@ -83,7 +83,7 @@
             // Restore interrupted state...
             Thread.currentThread().interrupt();
         } catch (Exception ex) {
-            log.error(String.format("Failed to get active window, top most window=[%s]", topMostWindowResult == null ? "null" : topMostWindowResult), ex);
+            log.debug(String.format("Failed to get active window, top most window=[%s]", topMostWindowResult == null ? "null" : topMostWindowResult), ex);
         }
         return null;
     }
@@ -133,7 +133,7 @@
      */
     public String runAppleScriptFile(String filename, String... params) {
         try {
-            String filePath = FileSystemUtils.getHomeDirectory().concat("/").concat(filename);
+            String filePath = FileSystemUtils.getKeepasteDirectory().concat("/").concat(filename);
             File scriptFile = new File(filePath);
             if (!scriptFile.exists()) {
                 try (InputStream inputStream = KeepsManager.class.getResourceAsStream("/scripts/mac/".concat(filename))) {
@@ -153,7 +153,7 @@
                 command = command.concat(" \"").concat(param).concat("\"");
             }
 
-            List<String> output = Application.getContext().getKeepExecutionManager().executeCommand(command);
+            List<String> output = Application.getContext().getKeepExecutionManager().executeCommandWithDefaultPath(command);
             if (!output.isEmpty()) {
                 return output.get(0);
             }
@@ -169,7 +169,7 @@
      * Will delete the used applescript files from the .keepaste folder in order to keep those refreshed, if any changes were done to them between versions.
      */
     private void delAppleScriptFilesForRefresh() {
-        FileSystemUtils.deleteFile(FileSystemUtils.getHomeDirectory().concat("/").concat(GET_TOP_MOST_WINDOW_APPLESCRIPT_FILENAME));
+        FileSystemUtils.deleteFile(FileSystemUtils.getKeepasteDirectory().concat("/").concat(GET_TOP_MOST_WINDOW_APPLESCRIPT_FILENAME));
     }
 
     /**
Index: logic/src/main/java/com/keepaste/logic/models/SettingsToFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.keepaste.logic.models;\r\n\r\nimport lombok.*;\r\n\r\n/**\r\n * This is a simplified class is for saving the settings as defined in {@link ModelSettings} as Json on a file.\r\n */\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Builder\r\n@Getter\r\n@Setter\r\n@ToString\r\npublic class SettingsToFile {\r\n    private boolean copyToClipboard;\r\n    private boolean focusOnWindowAndPaste;\r\n    private boolean pressEnterAfterPaste;\r\n    private String themeClassName;\r\n    private boolean alwaysOnTop;\r\n}\r\n
===================================================================
diff --git a/logic/src/main/java/com/keepaste/logic/models/SettingsToFile.java b/logic/src/main/java/com/keepaste/logic/models/SettingsToFile.java
--- a/logic/src/main/java/com/keepaste/logic/models/SettingsToFile.java	
+++ b/logic/src/main/java/com/keepaste/logic/models/SettingsToFile.java	
@@ -17,4 +17,5 @@
     private boolean pressEnterAfterPaste;
     private String themeClassName;
     private boolean alwaysOnTop;
+    private String path;
 }
Index: logic/src/main/java/com/keepaste/logic/views/ViewTopMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * Keepaste - The keep and paste program (http://www.keepaste.com)\r\n * Copyright (C) 2023 Tamir Krispis\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage com.keepaste.logic.views;\r\n\r\nimport com.formdev.flatlaf.themes.FlatMacDarkLaf;\r\nimport com.keepaste.logic.Application;\r\nimport com.keepaste.logic.actionlisteners.topmenu.AlwaysOnTopActionListener;\r\nimport com.keepaste.logic.actionlisteners.topmenu.DialogAboutActionListener;\r\nimport com.keepaste.logic.actionlisteners.topmenu.DialogHeartActionListener;\r\nimport com.keepaste.logic.actionlisteners.topmenu.ExitActionListener;\r\nimport com.keepaste.logic.actionlisteners.topmenu.AutoEnterActionListener;\r\nimport com.keepaste.logic.actionlisteners.topmenu.FocusOnTargetWindowActionListener;\r\nimport com.keepaste.logic.actionlisteners.topmenu.CopyToClipboardActionListener;\r\nimport com.keepaste.logic.actionlisteners.topmenu.ThemesMenuItemActionListener;\r\nimport com.keepaste.logic.utils.OperatingSystemUtils;\r\nimport lombok.Getter;\r\nimport lombok.NonNull;\r\n\r\nimport javax.swing.*;\r\n\r\n/**\r\n * This View class manages the menu items.\r\n */\r\npublic class ViewTopMenu {\r\n\r\n    final JMenu menuItemMain;\r\n    final JMenu menuItemAbout;\r\n    final JMenu menuItemHeart;\r\n\r\n    @Getter\r\n    JCheckBoxMenuItem lockingMenuItem;\r\n\r\n    public ViewTopMenu(@NonNull final JMenu menuItemMain,\r\n                       @NonNull final JMenu menuItemAbout,\r\n                       @NonNull final JMenu menuItemHeart) {\r\n        this.menuItemMain = menuItemMain;\r\n        this.menuItemAbout = menuItemAbout;\r\n        this.menuItemHeart = menuItemHeart;\r\n    }\r\n\r\n    public void initUpperMenuBar() {\r\n        if (OperatingSystemUtils.getOperatingSystemType() == OperatingSystemUtils.OperatingSystemType.WINDOWS) {\r\n            lockingMenuItem = new JCheckBoxMenuItem(\"Toggle Locking\", false);\r\n            menuItemMain.add(lockingMenuItem);\r\n        }\r\n\r\n        JCheckBoxMenuItem alwaysOnTopCheckBoxMenuItem = new JCheckBoxMenuItem(\"Always on top\", Application.getContext().getModelSettings().isAlwaysOnTop());\r\n        AlwaysOnTopActionListener alwaysOnTopActionListener = new AlwaysOnTopActionListener();\r\n        alwaysOnTopCheckBoxMenuItem.addActionListener(alwaysOnTopActionListener);\r\n        menuItemMain.add(alwaysOnTopCheckBoxMenuItem);\r\n        menuItemMain.add(new JSeparator());\r\n\r\n        JMenu settingsMenu = new JMenu(\"Settings\");\r\n\r\n        JMenu flowMenuItem = new JMenu(\"Flow\");\r\n\r\n        settingsMenu.add(flowMenuItem);\r\n\r\n        JCheckBoxMenuItem copyToClipboardCheckBoxMenuItem = new JCheckBoxMenuItem(\"1. Copy keep to clipboard\", Application.getContext().getModelSettings().isCopyToClipboard());\r\n        JCheckBoxMenuItem focusOnTargetWindowCheckBoxMenuItem = new JCheckBoxMenuItem(\"2. Focus on target window and paste\", Application.getContext().getModelSettings().isFocusOnWindowAndPaste());\r\n        JCheckBoxMenuItem autoEnterCheckBoxMenuItem = new JCheckBoxMenuItem(\"3. Press 'Enter'\", Application.getContext().getModelSettings().isPressEnterAfterPaste());\r\n\r\n\r\n        CopyToClipboardActionListener copyToClipboardActionListener = new CopyToClipboardActionListener(autoEnterCheckBoxMenuItem, focusOnTargetWindowCheckBoxMenuItem);\r\n        copyToClipboardCheckBoxMenuItem.addActionListener(copyToClipboardActionListener);\r\n        flowMenuItem.add(copyToClipboardCheckBoxMenuItem);\r\n\r\n        FocusOnTargetWindowActionListener focusOnTargetWindowActionListener = new FocusOnTargetWindowActionListener(copyToClipboardCheckBoxMenuItem, autoEnterCheckBoxMenuItem);\r\n        focusOnTargetWindowCheckBoxMenuItem.addActionListener(focusOnTargetWindowActionListener);\r\n        flowMenuItem.add(focusOnTargetWindowCheckBoxMenuItem);\r\n\r\n        AutoEnterActionListener autoEnterActionListener = new AutoEnterActionListener(copyToClipboardCheckBoxMenuItem, focusOnTargetWindowCheckBoxMenuItem);\r\n        autoEnterCheckBoxMenuItem.addActionListener(autoEnterActionListener);\r\n        flowMenuItem.add(autoEnterCheckBoxMenuItem);\r\n\r\n        JMenu themesMenuItem = new JMenu(\"Themes\");\r\n        ButtonGroup themesRadioButtonGroup = new ButtonGroup();\r\n        ThemesMenuItemActionListener themesMenuItemActionListener = new ThemesMenuItemActionListener();\r\n        JRadioButtonMenuItem darkModeRadioMenuItem = new JRadioButtonMenuItem(\"Dark\");\r\n        darkModeRadioMenuItem.addActionListener(themesMenuItemActionListener);\r\n        JRadioButtonMenuItem lightModeRadioMenuItem = new JRadioButtonMenuItem(\"Light\");\r\n        lightModeRadioMenuItem.addActionListener(themesMenuItemActionListener);\r\n        themesRadioButtonGroup.add(darkModeRadioMenuItem);\r\n        themesRadioButtonGroup.add(lightModeRadioMenuItem);\r\n\r\n        if (Application.getContext().getModelSettings().getTheme().getName().equals(FlatMacDarkLaf.NAME)) {\r\n            darkModeRadioMenuItem.setSelected(true);\r\n        } else {\r\n            lightModeRadioMenuItem.setSelected(true);\r\n        }\r\n\r\n        themesMenuItem.add(darkModeRadioMenuItem);\r\n        themesMenuItem.add(lightModeRadioMenuItem);\r\n        settingsMenu.add(themesMenuItem);\r\n\r\n        menuItemMain.add(settingsMenu);\r\n        menuItemMain.add(new JSeparator());\r\n\r\n        JMenuItem exitMenuItem = new JMenuItem(\"Exit\");\r\n        exitMenuItem.addActionListener(new ExitActionListener());\r\n        menuItemMain.add(exitMenuItem);\r\n\r\n        menuItemAbout.addMouseListener(new DialogAboutActionListener());\r\n        menuItemHeart.addMouseListener(new DialogHeartActionListener());\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/logic/src/main/java/com/keepaste/logic/views/ViewTopMenu.java b/logic/src/main/java/com/keepaste/logic/views/ViewTopMenu.java
--- a/logic/src/main/java/com/keepaste/logic/views/ViewTopMenu.java	
+++ b/logic/src/main/java/com/keepaste/logic/views/ViewTopMenu.java	
@@ -27,6 +27,7 @@
 import com.keepaste.logic.actionlisteners.topmenu.AutoEnterActionListener;
 import com.keepaste.logic.actionlisteners.topmenu.FocusOnTargetWindowActionListener;
 import com.keepaste.logic.actionlisteners.topmenu.CopyToClipboardActionListener;
+import com.keepaste.logic.actionlisteners.topmenu.PathMenuItemActionListener;
 import com.keepaste.logic.actionlisteners.topmenu.ThemesMenuItemActionListener;
 import com.keepaste.logic.utils.OperatingSystemUtils;
 import lombok.Getter;
@@ -109,6 +110,11 @@
         themesMenuItem.add(lightModeRadioMenuItem);
         settingsMenu.add(themesMenuItem);
 
+        JMenuItem pathMenuItem = new JMenuItem("$PATH");
+        PathMenuItemActionListener pathMenuItemActionListener = new PathMenuItemActionListener();
+        pathMenuItem.addActionListener(pathMenuItemActionListener);
+        settingsMenu.add(pathMenuItem);
+
         menuItemMain.add(settingsMenu);
         menuItemMain.add(new JSeparator());
 
Index: logic/src/main/java/com/keepaste/logic/models/ModelSettings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * Keepaste - The keep and paste program (http://www.keepaste.com)\r\n * Copyright (C) 2023 Tamir Krispis\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage com.keepaste.logic.models;\r\n\r\nimport lombok.Builder;\r\nimport lombok.Getter;\r\n\r\nimport javax.swing.*;\r\n\r\n/**\r\n * This class represents the settings model.\r\n */\r\n@Builder\r\n@Getter\r\npublic class ModelSettings extends BaseModel {\r\n    public static final String LINE_SEPARATOR = \"line.separator\";\r\n    // execution flow - if to copy the Keep to the Clipboard.\r\n    private boolean copyToClipboard;\r\n    // execution flow - if to focus on the active window and paste the Keep's phrase.\r\n    private boolean focusOnWindowAndPaste;\r\n    // execution flow - if to press the 'Enter' key after pasting, to execute the phrase.\r\n    private boolean pressEnterAfterPaste;\r\n    // the set GUI theme\r\n    private LookAndFeel theme;\r\n    // if the window should be always on top\r\n    private boolean alwaysOnTop;\r\n\r\n    /**\r\n     * If to copy the Keep to the Clipboard.\r\n     *\r\n     * @param value the value\r\n     */\r\n    public void setCopyToClipboard(final boolean value) {\r\n        this.copyToClipboard = value;\r\n        updateAllObservers(this);\r\n    }\r\n\r\n    /**\r\n     * If to press the 'Enter' key after pasting, to execute the phrase.\r\n     *\r\n     * @param value the value\r\n     */\r\n    public void setPressEnterAfterPaste(final boolean value) {\r\n        this.pressEnterAfterPaste = value;\r\n        updateAllObservers(this);\r\n    }\r\n\r\n    /**\r\n     * If to focus on the active window and paste the Keep's phrase.\r\n     *\r\n     * @param value the value\r\n     */\r\n    public void setFocusOnWindowAndPaste(final boolean value) {\r\n        this.focusOnWindowAndPaste = value;\r\n        updateAllObservers(this);\r\n    }\r\n\r\n    /**\r\n     * The set GUI theme.\r\n     *\r\n     * @param lookAndFeel the value\r\n     */\r\n    public void setLookAndFeel(LookAndFeel lookAndFeel) {\r\n        this.theme = lookAndFeel;\r\n        updateAllObservers(this);\r\n    }\r\n\r\n    /**\r\n     * If the window should be always on top\r\n     * @param value the value\r\n     */\r\n    public void setAlwaysOnTop(final boolean value) {\r\n        this.alwaysOnTop = value;\r\n        updateAllObservers(this);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"copyToClipboard=\".concat(String.valueOf(copyToClipboard)));\r\n        sb.append(System.getProperty(LINE_SEPARATOR));\r\n        sb.append(\"focusOnTargetWindowAndPaste=\".concat(String.valueOf(focusOnWindowAndPaste)));\r\n        sb.append(System.getProperty(LINE_SEPARATOR));\r\n        sb.append(\"pressEnterAfterPaste=\".concat(String.valueOf(pressEnterAfterPaste)));\r\n        sb.append(System.getProperty(LINE_SEPARATOR));\r\n        sb.append(\"theme=\".concat(getTheme().getClass().getName()));\r\n        sb.append(System.getProperty(LINE_SEPARATOR));\r\n        return sb.toString();\r\n    }\r\n}\r\n
===================================================================
diff --git a/logic/src/main/java/com/keepaste/logic/models/ModelSettings.java b/logic/src/main/java/com/keepaste/logic/models/ModelSettings.java
--- a/logic/src/main/java/com/keepaste/logic/models/ModelSettings.java	
+++ b/logic/src/main/java/com/keepaste/logic/models/ModelSettings.java	
@@ -18,6 +18,7 @@
 
 package com.keepaste.logic.models;
 
+import com.keepaste.logic.managers.SettingsManager;
 import lombok.Builder;
 import lombok.Getter;
 
@@ -27,20 +28,31 @@
  * This class represents the settings model.
  */
 @Builder
-@Getter
 public class ModelSettings extends BaseModel {
     public static final String LINE_SEPARATOR = "line.separator";
+
     // execution flow - if to copy the Keep to the Clipboard.
+    @Getter
     private boolean copyToClipboard;
+
     // execution flow - if to focus on the active window and paste the Keep's phrase.
+    @Getter
     private boolean focusOnWindowAndPaste;
+
     // execution flow - if to press the 'Enter' key after pasting, to execute the phrase.
+    @Getter
     private boolean pressEnterAfterPaste;
+
     // the set GUI theme
     private LookAndFeel theme;
+
     // if the window should be always on top
+    @Getter
     private boolean alwaysOnTop;
 
+    // the PATH env var to use when running parameter commands in the background
+    private String path;
+
     /**
      * If to copy the Keep to the Clipboard.
      *
@@ -90,6 +102,23 @@
         updateAllObservers(this);
     }
 
+    /**
+     * PATH environment variable to be used when running parameter commands.
+     * @param value the value
+     */
+    public void setPath(final String value) {
+        this.path = value;
+        updateAllObservers(this);
+    }
+
+    public LookAndFeel getTheme() {
+        return theme == null ? SettingsManager.getDefaultModelSettings().getTheme() : theme;
+    }
+
+    public String getPath() {
+        return path == null ? SettingsManager.getDefaultModelSettings().getPath() : path;
+    }
+
     @Override
     public String toString() {
         StringBuilder sb = new StringBuilder();
Index: logic/src/main/java/com/keepaste/logic/managers/window/WindowsWindowsManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * Keepaste - The keep and paste program (http://www.keepaste.com)\r\n * Copyright (C) 2023 Tamir Krispis\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage com.keepaste.logic.managers.window;\r\n\r\nimport com.keepaste.logic.Application;\r\nimport com.keepaste.logic.models.WindowInformation;\r\nimport com.keepaste.logic.utils.KeyboardUtils;\r\nimport com.sun.jna.Native;\r\nimport com.sun.jna.platform.win32.Kernel32;\r\nimport com.sun.jna.platform.win32.PsapiUtil;\r\nimport com.sun.jna.platform.win32.User32;\r\nimport com.sun.jna.platform.win32.WinDef;\r\nimport com.sun.jna.platform.win32.WinNT;\r\nimport com.sun.jna.platform.win32.WinUser;\r\nimport com.sun.jna.ptr.IntByReference;\r\nimport lombok.NonNull;\r\nimport lombok.extern.log4j.Log4j2;\r\n\r\nimport java.awt.event.KeyEvent;\r\n\r\n/**\r\n * This class is Windows's {@link WindowManager}, it holds relevant methods related to windows management in the Windows OS.\r\n */\r\n@Log4j2\r\npublic final class WindowsWindowsManager extends BaseWindowManager implements WindowManager {\r\n    public static final int BUFFER_LENGTH_MEGA = 1024;\r\n    private WindowInformation lastTopMostWindow;\r\n\r\n    @Override\r\n    public WindowInformation getActiveWindow() {\r\n\r\n        // TODO: we need to find out when the locking window was closed, then release the locking from it.\r\n        // maybe check from active windows/processes, if the name exists or not\r\n\r\n        try {\r\n            // active window handle\r\n            WinDef.HWND hwnd = User32.INSTANCE.GetForegroundWindow();\r\n\r\n            // getting the process id by the active window handle\r\n            IntByReference intByReference = new IntByReference();\r\n            User32.INSTANCE.GetWindowThreadProcessId(hwnd, intByReference);\r\n            int processId = intByReference.getValue();\r\n\r\n            // getting extended thread info if needed\r\n//        WinUser.GUITHREADINFO guithreadinfo = new WinUser.GUITHREADINFO();\r\n//        User32.INSTANCE.GetGUIThreadInfo(processId, guithreadinfo);\r\n\r\n            // getting the active window text (title)\r\n            char[] windowTextBuf = new char[BUFFER_LENGTH_MEGA];\r\n            User32.INSTANCE.GetWindowText(hwnd, windowTextBuf, BUFFER_LENGTH_MEGA);\r\n            String windowText = Native.toString(windowTextBuf);\r\n\r\n            WinUser.WINDOWINFO windowinfo = new WinUser.WINDOWINFO();\r\n            User32.INSTANCE.GetWindowInfo(hwnd, windowinfo);\r\n\r\n            // getting the executable file name based on the extracted process id\r\n            WinNT.HANDLE process = Kernel32.INSTANCE.OpenProcess(BUFFER_LENGTH_MEGA | 0x0010, false, processId);\r\n            if (process != null) {\r\n                String processImageFileName = PsapiUtil.GetProcessImageFileName(process);\r\n\r\n\r\n                // another option and format for getting the executable file name of the active window\r\n//        char[] buffer = new char[1024];\r\n//        Psapi.INSTANCE.GetModuleFileNameExW(process, null, buffer, 1024);\r\n//        String moduleFilenameExW = Native.toString(buffer);\r\n\r\n                // closing the handle once done with it\r\n                // Kernel32Util.closeHandle(process);\r\n\r\n                var topMostWindow = WindowInformation.builder()\r\n                        .text(windowText)\r\n                        .processId(processId)\r\n                        .app(processImageFileName)\r\n                        .hwnd(hwnd)\r\n                        .left(windowinfo.rcWindow.left)\r\n                        .right(windowinfo.rcWindow.right)\r\n                        .top(windowinfo.rcWindow.top)\r\n                        .bottom(windowinfo.rcWindow.bottom)\r\n                        .build();\r\n\r\n//                if (lastTopMostWindow == null || (topMostWindow.getProcessId() != lastTopMostWindow.getProcessId())) {\r\n                if (!topMostWindow.equals(lastTopMostWindow)) {\r\n                    log.debug(\"top most window = [{}]\", topMostWindow);\r\n                }\r\n                lastTopMostWindow = topMostWindow;\r\n                return topMostWindow;\r\n            }\r\n            return null;\r\n        } catch (Exception ex) {\r\n            log.error(\"Failed to get active window\", ex);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void paste() {\r\n        log.debug(\"Pasting using SHIFT+INSERT\");\r\n        KeyboardUtils.keyPress(KeyEvent.VK_SHIFT);\r\n        KeyboardUtils.delay(100);\r\n        KeyboardUtils.keyPress(KeyEvent.VK_INSERT);\r\n        KeyboardUtils.keyRelease(KeyEvent.VK_INSERT);\r\n        KeyboardUtils.delay(50);\r\n        KeyboardUtils.keyRelease(KeyEvent.VK_SHIFT);\r\n    }\r\n\r\n    @Override\r\n    public boolean focusOnActiveWindow(@NonNull final WindowInformation windowContext) {\r\n        try {\r\n            WindowInformation activeWindow = Application.getContext().getModelActiveWindow().getActiveWindow();\r\n            if (activeWindow != null) {\r\n                /*WinDef.HWND result = */\r\n                User32DLL.SetFocus(activeWindow.getHwnd());\r\n//        CommandAction.User32DLL.ShowWindow(ActiveWindow.activeWindow.getHwnd(), User32.SW_RESTORE);\r\n                User32DLL.SetForegroundWindow(activeWindow.getHwnd());\r\n                return true;\r\n            } else {\r\n                log.error(String.format(\"Failed to focus on window as active window is null [%s]\", windowContext));\r\n                return false;\r\n            }\r\n        } catch (Exception ex) {\r\n            log.error(String.format(\"Failed to focus on window as active window is null [%s]\", windowContext), ex);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static class User32DLL {\r\n        static {\r\n            Native.register(\"user32\");\r\n        }\r\n\r\n//        public static native int GetWindowThreadProcessId(HWND hWnd, PointerByReference pref);\r\n//        public static native HWND GetForegroundWindow();\r\n//        public static native int GetWindowTextW(HWND hWnd, char[] lpString, int nMaxCount);\r\n        public static native WinDef.HWND SetFocus(WinDef.HWND hWnd);\r\n        public static native boolean ShowWindow(WinDef.HWND hWnd, int nCmdShow);\r\n        public static native boolean SetForegroundWindow(WinDef.HWND hWnd);\r\n//        public static native boolean SetWindowPos(WinDef.HWND hWnd,\r\n//                                                  WinDef.HWND hWndInsertAfter,\r\n//                                                  int X,\r\n//                                                  int Y,\r\n//                                                  int cx,\r\n//                                                  int cy,\r\n//                                                  int uFlags);\r\n    }\r\n\r\n//    static class Psapi {\r\n//        static { Native.register(\"psapi\"); }\r\n//        public static native int GetModuleBaseNameW(Pointer hProcess, Pointer hmodule, char[] lpBaseName, int size);\r\n//    }\r\n//\r\n//    static class Kernel32 {\r\n//        static { Native.register(\"kernel32\"); }\r\n//        public static int PROCESS_QUERY_INFORMATION = 0x0400;\r\n//        public static int PROCESS_VM_READ = 0x0010;\r\n//        public static native int GetLastError();\r\n//        public static native Pointer OpenProcess(int dwDesiredAccess, boolean bInheritHandle, Pointer pointer);\r\n//    }\r\n//\r\n//    static class User32DLL {\r\n//        static { Native.register(\"user32\"); }\r\n//        public static native int GetWindowThreadProcessId(HWND hWnd, PointerByReference pref);\r\n//        public static native HWND GetForegroundWindow();\r\n//        public static native int GetWindowTextW(HWND hWnd, char[] lpString, int nMaxCount);\r\n//    }\r\n}\r\n
===================================================================
diff --git a/logic/src/main/java/com/keepaste/logic/managers/window/WindowsWindowsManager.java b/logic/src/main/java/com/keepaste/logic/managers/window/WindowsWindowsManager.java
--- a/logic/src/main/java/com/keepaste/logic/managers/window/WindowsWindowsManager.java	
+++ b/logic/src/main/java/com/keepaste/logic/managers/window/WindowsWindowsManager.java	
@@ -103,7 +103,7 @@
             }
             return null;
         } catch (Exception ex) {
-            log.error("Failed to get active window", ex);
+            log.debug("Failed to get active window", ex);
             return null;
         }
     }
Index: logic/src/main/java/com/keepaste/logic/managers/SettingsManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * Keepaste - The keep and paste program (http://www.keepaste.com)\r\n * Copyright (C) 2023 Tamir Krispis\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage com.keepaste.logic.managers;\r\n\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.formdev.flatlaf.themes.FlatMacDarkLaf;\r\nimport com.formdev.flatlaf.themes.FlatMacLightLaf;\r\nimport com.keepaste.logic.models.SettingsToFile;\r\nimport com.keepaste.logic.utils.FileSystemUtils;\r\nimport com.keepaste.logic.models.ModelSettings;\r\nimport lombok.extern.log4j.Log4j2;\r\nimport javax.swing.*;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * This utility class is for managing the {@link ModelSettings}.\r\n */\r\n@Log4j2\r\npublic abstract class SettingsManager {\r\n\r\n    private static final ObjectMapper MAPPER = new ObjectMapper();\r\n    private static final File SETTINGS_FILE = new File(FileSystemUtils.getHomeDirectory().concat(\"/settings.json\"));\r\n\r\n    /**\r\n     * Will load settings from file.\r\n     *\r\n     * @return a {@link ModelSettings}\r\n     */\r\n    public static ModelSettings loadSettingsFromFile() {\r\n        validateSettingsFileExists();\r\n        try {\r\n            log.debug(\"Loading settings file [{}]\", SETTINGS_FILE.getPath());\r\n            SettingsToFile settingsToFile = MAPPER.readValue(SETTINGS_FILE, SettingsToFile.class);\r\n            return parseSettingsToFileToModelSettings(settingsToFile);\r\n        } catch (IOException e) {\r\n            log.error(String.format(\"Failed to load settings from file [%s]\", SETTINGS_FILE), e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Will save the given {@link ModelSettings} to a file.\r\n     *\r\n     * @param settings the {@link ModelSettings} to persis\r\n     */\r\n    public static void saveSettingsToFile(ModelSettings settings) {\r\n        validateSettingsFileExists();\r\n        try {\r\n\r\n            SettingsToFile settingsToFile = SettingsToFile.builder()\r\n                            .themeClassName(settings.getTheme().getClass().getName())\r\n                            .pressEnterAfterPaste(settings.isPressEnterAfterPaste())\r\n                            .focusOnWindowAndPaste(settings.isFocusOnWindowAndPaste())\r\n                            .copyToClipboard(settings.isCopyToClipboard())\r\n                            .alwaysOnTop(settings.isAlwaysOnTop())\r\n                            .build();\r\n\r\n            MAPPER.writeValue(SETTINGS_FILE, settingsToFile);\r\n        } catch (IOException e) {\r\n            log.error(String.format(\"Failed to save settings [%s] to file [%s]\", settings, SETTINGS_FILE.getPath()), e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will create a default settings file with initial default values.\r\n     */\r\n    public static void createDefaultSettingsFile() {\r\n        SettingsToFile settingsToFile = getDefaultSettings();\r\n        saveSettingsToFile(settingsToFile);\r\n    }\r\n\r\n    /**\r\n     * Will get the default {@link ModelSettings} once one of the user is not present (persisted already).\r\n     *\r\n     * @return the default {@link ModelSettings}\r\n     */\r\n    public static ModelSettings getDefaultModelSettings() {\r\n        return parseSettingsToFileToModelSettings(getDefaultSettings());\r\n    }\r\n\r\n\r\n    /**\r\n     * Will parse a model representing the file - {@link SettingsToFile} to a genuine {@link ModelSettings}.\r\n     *\r\n     * @return a {@link ModelSettings}\r\n     */\r\n    private static ModelSettings parseSettingsToFileToModelSettings(SettingsToFile settingsToFile) {\r\n        LookAndFeel lookAndFeel = new FlatMacDarkLaf();\r\n        if (settingsToFile.getThemeClassName().equals(FlatMacLightLaf.class.getName())) {\r\n            lookAndFeel = new FlatMacLightLaf();\r\n        }\r\n        return ModelSettings.builder()\r\n                .copyToClipboard(settingsToFile.isCopyToClipboard())\r\n                .focusOnWindowAndPaste(settingsToFile.isFocusOnWindowAndPaste())\r\n                .pressEnterAfterPaste(settingsToFile.isPressEnterAfterPaste())\r\n                .theme(lookAndFeel)\r\n                .alwaysOnTop(settingsToFile.isAlwaysOnTop())\r\n                .build();\r\n    }\r\n\r\n    /**\r\n     * Will save the given {@link SettingsToFile} to a file.\r\n     *\r\n     * @param settings the settings to persist\r\n     */\r\n    private static void saveSettingsToFile(SettingsToFile settings) {\r\n        try {\r\n            log.debug(\"Saving settings [{}] to file [{}]\", settings, SETTINGS_FILE);\r\n            MAPPER.writeValue(SETTINGS_FILE, settings);\r\n        } catch (IOException e) {\r\n            log.error(String.format(\"Failed to save settings [%s] to file [%s]\", settings, SETTINGS_FILE.getPath()), e);\r\n        }\r\n    }\r\n\r\n\r\n    private static void validateSettingsFileExists() {\r\n        if (!SETTINGS_FILE.exists()) {\r\n            // setting and saving default settings\r\n            log.debug(\"Settings file [{}] doesn't exist, creating one\", SETTINGS_FILE.getPath());\r\n            createDefaultSettingsFile();\r\n        }\r\n    }\r\n\r\n    private static SettingsToFile getDefaultSettings() {\r\n        return SettingsToFile.builder()\r\n                        .copyToClipboard(true)\r\n                        .focusOnWindowAndPaste(true)\r\n                        .pressEnterAfterPaste(true)\r\n                        .themeClassName(\"FlatMacDarkLaf\")\r\n                        .alwaysOnTop(true)\r\n                        .build();\r\n    }\r\n}\r\n
===================================================================
diff --git a/logic/src/main/java/com/keepaste/logic/managers/SettingsManager.java b/logic/src/main/java/com/keepaste/logic/managers/SettingsManager.java
--- a/logic/src/main/java/com/keepaste/logic/managers/SettingsManager.java	
+++ b/logic/src/main/java/com/keepaste/logic/managers/SettingsManager.java	
@@ -34,9 +34,17 @@
  */
 @Log4j2
 public abstract class SettingsManager {
+    private static final SettingsToFile DEFAULT_MODEL_SETTINGS = SettingsToFile.builder()
+            .copyToClipboard(true)
+            .focusOnWindowAndPaste(true)
+            .pressEnterAfterPaste(true)
+            .themeClassName("FlatMacDarkLaf")
+            .alwaysOnTop(true)
+            .path("/usr/local/bin:/usr/bin:/bin")
+            .build();
 
     private static final ObjectMapper MAPPER = new ObjectMapper();
-    private static final File SETTINGS_FILE = new File(FileSystemUtils.getHomeDirectory().concat("/settings.json"));
+    private static final File SETTINGS_FILE = new File(FileSystemUtils.getKeepasteDirectory().concat("/settings.json"));
 
     /**
      * Will load settings from file.
@@ -70,6 +78,7 @@
                             .focusOnWindowAndPaste(settings.isFocusOnWindowAndPaste())
                             .copyToClipboard(settings.isCopyToClipboard())
                             .alwaysOnTop(settings.isAlwaysOnTop())
+                            .path(settings.getPath())
                             .build();
 
             MAPPER.writeValue(SETTINGS_FILE, settingsToFile);
@@ -112,6 +121,7 @@
                 .pressEnterAfterPaste(settingsToFile.isPressEnterAfterPaste())
                 .theme(lookAndFeel)
                 .alwaysOnTop(settingsToFile.isAlwaysOnTop())
+                .path(settingsToFile.getPath())
                 .build();
     }
 
@@ -139,12 +149,6 @@
     }
 
     private static SettingsToFile getDefaultSettings() {
-        return SettingsToFile.builder()
-                        .copyToClipboard(true)
-                        .focusOnWindowAndPaste(true)
-                        .pressEnterAfterPaste(true)
-                        .themeClassName("FlatMacDarkLaf")
-                        .alwaysOnTop(true)
-                        .build();
+        return DEFAULT_MODEL_SETTINGS;
     }
 }
Index: logic/src/main/java/com/keepaste/logic/managers/KeepsManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * Keepaste - The keep and paste program (http://www.keepaste.com)\r\n * Copyright (C) 2023 Tamir Krispis\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage com.keepaste.logic.managers;\r\n\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.keepaste.logic.models.Keep;\r\nimport com.keepaste.logic.models.KeepsGroup;\r\nimport com.keepaste.logic.models.KeepNode;\r\nimport com.keepaste.logic.models.KeepParameter;\r\nimport com.keepaste.logic.utils.FileSystemUtils;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport lombok.Getter;\r\nimport lombok.extern.log4j.Log4j2;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.nio.file.Files;\r\nimport java.util.*;\r\nimport static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\r\n\r\n/**\r\n * This utility class holds methods for managing {@link Keep}s.\r\n */\r\n@Log4j2\r\npublic final class KeepsManager {\r\n\r\n    private final ObjectMapper objectMapper = new ObjectMapper();\r\n\r\n    @Getter\r\n    private KeepsGroup rootNode;\r\n\r\n    /* ***************** PUBLIC METHODS ***************** */\r\n\r\n    /**\r\n     * Load Keeps into the tree.\r\n     *\r\n     * @return the root node of the tree\r\n     * @throws IOException in case of failure\r\n     */\r\n    public KeepsGroup loadKeeps() throws IOException {\r\n        return loadKeeps(getKeepsFile());\r\n    }\r\n\r\n    /**\r\n     * Will load Keeps into the tree from a given specific file.\r\n     *\r\n     * @param keepsFile the Keeps filename\r\n     * @return the root node of the tree\r\n     */\r\n    public KeepsGroup loadKeeps(File keepsFile) {\r\n        try {\r\n            rootNode = objectMapper.readValue(keepsFile, KeepsGroup.class);\r\n            return rootNode;\r\n        } catch (IOException e) {\r\n            log.error(\"Failed to load Keeps\", e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Will save the current tree structure into a file.\r\n     *\r\n     * @param rootNodeContext   the root node of the tree\r\n     */\r\n    public void saveKeeps(KeepsGroup rootNodeContext) {\r\n        try {\r\n            saveKeeps(rootNodeContext, getKeepsFile());\r\n        } catch (Exception ex) {\r\n            log.error(\"Failed to save Keeps\", ex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will save the current tree structure into a file.\r\n     *\r\n     * @param rootNodeContext   the root node of the tree\r\n     * @param toFile            the {@link File} where to persist the tree structure\r\n     */\r\n    public void saveKeeps(KeepsGroup rootNodeContext, File toFile) {\r\n        try {\r\n            if (rootNodeContext != null) {\r\n                backupKeepsFile(toFile);\r\n                objectMapper.writeValue(toFile, rootNodeContext);\r\n            }\r\n        } catch (IOException e) {\r\n            log.error(\"Failed to save Keeps\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will sort the tree alphabetically.\r\n     */\r\n    public void sort() {\r\n        sort(rootNode);\r\n    }\r\n\r\n    /**\r\n     * Will sort a given node's children alphabetically.\r\n     *\r\n     * @param node the root node to sort its children\r\n     */\r\n    public void sort(KeepNode node) {\r\n        if (node instanceof KeepsGroup) {\r\n            KeepsGroup group = (KeepsGroup) node;\r\n            for (KeepNode childNode : group.getKeepsNodes()) {\r\n                sort(childNode);\r\n            }\r\n            group.getKeepsNodes().sort((keepNode1, keepNode2) -> {\r\n                // keep groups before keeps\r\n                if (keepNode1 instanceof KeepsGroup && keepNode2 instanceof Keep) {\r\n                    return -1;\r\n                } else if (keepNode2 instanceof KeepsGroup && keepNode1 instanceof Keep) {\r\n                    return 1;\r\n                } else { // same types of nodes will be sorted by their title\r\n                    return keepNode1.getTitle().compareTo(keepNode2.getTitle());\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will return all unique parameters from across the entire tree, this is used for adding an existing parameter on the\r\n     * edit Keep dialog.\r\n     *\r\n     * @return a List of {@link KeepParameter}s\r\n     */\r\n    public List<KeepParameter> getAllUniqueParameters() {\r\n        log.debug(\"Getting all unique parameters\");\r\n        List<KeepParameter> parametersList = new ArrayList<>();\r\n        extractParamsFromNode(rootNode, parametersList);\r\n        parametersList.sort((o1, o2) -> String.CASE_INSENSITIVE_ORDER.compare(o1.toString(), o2.toString()));\r\n        return parametersList;\r\n    }\r\n\r\n    /**\r\n     * Will return a json representation of a {@link Keep}.\r\n     *\r\n     * @param keep  the keep\r\n     * @return      a json representation of the keep\r\n     * @throws JsonProcessingException upon failure\r\n     */\r\n    public String getKeepJson(KeepNode keep) throws JsonProcessingException {\r\n        log.debug(\"Getting a keep as json string\");\r\n        return objectMapper.writeValueAsString(keep);\r\n    }\r\n\r\n    /**\r\n     * Will return a {@link KeepNode} out of a JSON {@link File}.\r\n     *\r\n     * @param jsonFile      the json file\r\n     * @return a {@link KeepNode} out of a JSON {@link File}.\r\n     * @throws IOException upon failure\r\n     */\r\n    public KeepNode getKeepFromJsonFile(File jsonFile) throws IOException {\r\n        log.debug(\"Getting a keep form json file\");\r\n        return objectMapper.readValue(jsonFile, KeepNode.class);\r\n    }\r\n\r\n    /**\r\n     * Gets the path to the keeps file.\r\n     *\r\n     * @return the path to the keeps file.\r\n     */\r\n    public String getKeepsFilePathString() {\r\n        return FileSystemUtils.getHomeDirectory().concat(\"/keeps.json\");\r\n    }\r\n\r\n    /* ***************** PRIVATE METHODS ***************** */\r\n\r\n    private void setDefaultKeepsTreeFromFile() throws IOException {\r\n        try (InputStream inputStream = KeepsManager.class.getResourceAsStream(\"/defaultkeeps/default_keeps.json\")) {\r\n            if (inputStream != null) {\r\n                String fileContents = new String(inputStream.readAllBytes());\r\n                String file = getKeepsFilePathString();\r\n                try (FileWriter writer = new FileWriter(file)) {\r\n                    log.debug(writer);\r\n                    writer.write(fileContents);\r\n                    log.info(\"Saved \".concat(file));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void backupKeepsFile(File sourceFile) throws IOException {\r\n        File targetFile = new File(getKeepsBackupFilePathString());\r\n        Files.copy(sourceFile.toPath(), targetFile.toPath(), REPLACE_EXISTING);\r\n    }\r\n\r\n    private void extractParamsFromNode(KeepNode node, List<KeepParameter> parameterList) {\r\n        if (node instanceof Keep) {\r\n            // keep, adding all parameters to the list\r\n            Keep keep = (Keep) node;\r\n            if (keep.getParameters() != null) {\r\n                for (KeepParameter p : keep.getParameters()) {\r\n                    if (!parameterList.contains(p)) {\r\n                        parameterList.add(p);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // keep group\r\n            for (KeepNode childNode : ((KeepsGroup) node).getKeepsNodes()) {\r\n                extractParamsFromNode(childNode, parameterList);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private File getKeepsFile() throws IOException {\r\n        log.debug(\"Getting keeps file\");\r\n        File keepsFile = new File(getKeepsFilePathString());\r\n        if (!keepsFile.exists()) {\r\n            log.info(\"Keeps file doesn't exist, saving and returning default keeps tree\");\r\n            setDefaultKeepsTreeFromFile();\r\n        }\r\n        log.debug(\"Returned keeps file [{}]\", keepsFile);\r\n        return keepsFile;\r\n    }\r\n\r\n    private String getKeepsBackupFilePathString() {\r\n        return FileSystemUtils.getHomeDirectory().concat(\"/keeps_bck.json\");\r\n    }\r\n}\r\n
===================================================================
diff --git a/logic/src/main/java/com/keepaste/logic/managers/KeepsManager.java b/logic/src/main/java/com/keepaste/logic/managers/KeepsManager.java
--- a/logic/src/main/java/com/keepaste/logic/managers/KeepsManager.java	
+++ b/logic/src/main/java/com/keepaste/logic/managers/KeepsManager.java	
@@ -179,7 +179,7 @@
      * @return the path to the keeps file.
      */
     public String getKeepsFilePathString() {
-        return FileSystemUtils.getHomeDirectory().concat("/keeps.json");
+        return FileSystemUtils.getKeepasteDirectory().concat("/keeps.json");
     }
 
     /* ***************** PRIVATE METHODS ***************** */
@@ -235,6 +235,6 @@
     }
 
     private String getKeepsBackupFilePathString() {
-        return FileSystemUtils.getHomeDirectory().concat("/keeps_bck.json");
+        return FileSystemUtils.getKeepasteDirectory().concat("/keeps_bck.json");
     }
 }
